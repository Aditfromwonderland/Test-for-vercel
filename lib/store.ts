/**
 * Simple in-memory store for guides
 * This is a temporary solution until a proper database is integrated
 */

import { FormData } from './schemas';

// Define the structure for an actionable step
export interface ActionableStep {
  title: string;
  description: string;
  iconName: string;
}

// Define the structure for guide content generated by OpenAI
export interface GuideContent {
  greeting: string;
  keyStrengths: string[];
  areasToFocus: string[];
  actionableSteps: ActionableStep[];
  conversationStarters: string[];
  closingRemark: string;
}

// Define the structure for a complete guide
export interface Guide {
  id: string;
  userInput: FormData;
  guideContent: GuideContent;
  createdAt: string;
}

// Create a Map to store guides by ID
// This will persist between API calls but will reset on server restart
const guides = new Map<string, Guide>();

/**
 * Add a guide to the store
 * @param guide The guide to add
 * @returns The added guide
 */
export function addGuide(guide: Guide): Guide {
  guides.set(guide.id, guide);
  return guide;
}

/**
 * Get a guide by ID
 * @param id The ID of the guide to retrieve
 * @returns The guide or null if not found
 */
export function getGuideById(id: string): Guide | null {
  return guides.get(id) || null;
}

/**
 * Get all guides
 * @returns An array of all guides
 */
export function getAllGuides(): Guide[] {
  return Array.from(guides.values());
}

/**
 * Clear all guides (mainly for testing purposes)
 */
export function clearGuides(): void {
  guides.clear();
}
